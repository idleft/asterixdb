/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
drop  dataverse test if exists;
create  dataverse test;
use test;

create type TweetType as open {
  id : int64,
  created_at : datetime
};

create type StoredTweetType as open {
  tid : uuid
};

drop dataset monumentList if exists;
drop type monumentType if exists;
create type monumentType as open {
  mid: string,
  mloc: point
};
create dataset monumentList(monumentType) primary key mid;
create index mlocidx on monumentList(mloc) type rtree;

create dataset Tweets1(StoredTweetType) primary key tid autogenerated;
create dataset Tweets2(StoredTweetType) primary key tid autogenerated;

insert into Tweets2
(From Tweets1 x
select x, (
let temp = create_circle(create_point(x.latitude, x.longitude), 3.0)
select value ml.mid from monumentList ml
  where /*+ indexnl */ spatial_intersect(temp, ml.mloc)));