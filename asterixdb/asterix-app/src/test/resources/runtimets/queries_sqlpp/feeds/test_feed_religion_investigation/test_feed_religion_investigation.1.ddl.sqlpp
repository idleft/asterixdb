/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

drop  dataverse test if exists;
create  dataverse test;
use test;

create type TweetType as open {
  id : int64,
  created_at : datetime
};

create type StoredTweetType as open {
  tid : uuid
};

drop dataset ReligiousBuildingDataset if exists;
drop type ReligiousBuildingType if exists;
create type ReligiousBuildingType as open {
    religiousBuildingId : string,
    religionName : string,
    buildingLocation : point,
    registeredBeliever: int
};
create dataset ReligiousBuildingDataset(ReligiousBuildingType) primary key religiousBuildingId;

drop dataset DistrictAreaDataset if exists;
drop type DistrictAreaType if exists;
create type DistrictAreaType as open {
    districtAreaId : string,
    districtArea : rectangle
};
create dataset DistrictAreaDataset(DistrictAreaType) primary key districtAreaId;

drop dataset FacilityDataset if exists;
drop type FacilityType if exists;
create type FacilityType as open {
    facilityId: string,
    facilityLocation: point,
    facilityType: string
};
create dataset FacilityDataset(FacilityType) primary key facilityId;


create function annotateTweet(x) {
    LET univ_num = (select value count(*) from FacilityDataset f, DistrictAreaDataset d
     where f.facilityType = "University" AND spatial_intersect(f.facilityLocation, d.districtArea) AND spatial_intersect(create_point(x.latitude, x.longitude), d.districtArea))[0],
     religion_dist = (select r.religionName as Religion, sum(r.registeredBeliever) as BelieverPopulation from ReligiousBuildingDataset r, DistrictAreaDataset d
       where spatial_intersect(r.buildingLocation, d.districtArea) AND spatial_intersect(create_point(x.latitude, x.longitude), d.districtArea)
       group by r.religionName
       order by BelieverPopulation DESC
       limit 3)
    select x.*, univ_num, religion_dist
};

create dataset Tweets1(StoredTweetType) primary key tid autogenerated;

create feed TweetFeed with {
    "adapter-name" : "expr_twitter",
    "type-name":"TweetType",
    "format" : "adm",
    "ingestion-location" : "asterix_nc1",
    "insert-feed" : true,
    "batch-size" : "15",
    "expr_amount" : 30,
    "country_coeff" : 20,
    "sdate" : "2008-01-01",
    "edate" : "2018-01-01",
    "slat" : "-180",
    "slong" : "-180",
    "elat" : "180",
    "elong" : "180",
    "numFriends" : "10000000",
    "statusesCount" : "10000000",
    "followersCount" : "10000000",
    "decouple" : true
};