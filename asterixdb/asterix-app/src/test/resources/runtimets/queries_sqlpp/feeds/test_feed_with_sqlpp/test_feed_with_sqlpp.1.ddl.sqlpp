/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

drop  dataverse test if exists;
create  dataverse test;
use test;

create type TweetType as open {
  id : int64,
  created_at : datetime
};

create type StoredTweetType as open {
  tid : uuid
};

drop dataset followersCountDataset if exists;
drop type followersCountType if exists;
create type followersCountType as open {
  fcid: string,
  fcstart: int,
  fcend: int
};
create dataset followersCountDataset(followersCountType) primary key fcid;

drop dataset statusesCountDataset if exists;
drop type statusesCountType if exists;
create type statusesCountType as open {
  scid: string,
  scstart: int,
  scend: int
};
create dataset statusesCountDataset(statusesCountType) primary key scid;

drop dataset friendsCountDataset if exists;
drop type friendsCountType if exists;
create type friendsCountType as open {
  frid: string,
  frstart: int,
  frend: int
};
create dataset friendsCountDataset(friendsCountType) primary key frid;

drop dataset timeRangeDataset if exists;
drop type timeRangeType if exists;
create type timeRangeType as open {
  trid: string,
  trstart: datetime,
  trend: datetime
};
create dataset timeRangeDataset(timeRangeType) primary key trid;

drop dataset spaceRangeDataset if exists;
drop type spaceRangeType if exists;
create type spaceRangeType as open {
  spid: string,
  spstart: point,
  spend: point
};
create dataset spaceRangeDataset(spaceRangeType) primary key spid;

create dataset Tweets1(StoredTweetType) primary key tid autogenerated;

create feed TweetFeed with {
    "adapter-name" : "expr_twitter",
    "type-name":"TweetType",
    "format" : "adm",
    "ingestion-location" : "asterix_nc1",
    "insert-feed" : true,
    "batch-size" : "5",
    "expr_amount" : 15,
    "country_coeff" : 200,
    "sdate" : "2008-01-01",
    "edate" : "2018-01-01",
    "slat" : "-180",
    "slong" : "-180",
    "elat" : "180",
    "elong" : "180",
    "numFriends" : "10000000",
    "statusesCount" : "10000000",
    "followersCount" : "10000000",
    "decouple" : true
};

create function annotateTweet(x) {
  LET followersClients = (select value fc.fcid from followersCountDataset fc
          where x.user.followers_count >= fc.fcstart AND x.user.followers_count < fc.fcend),
      statusesClients = (select value sc.scid from statusesCountDataset sc
          where x.user.status_count >= sc.scstart AND x.user.status_count < sc.scend),
      friendsClients = (select value fr.frid from friendsCountDataset fr
          where x.user.friends_count >= fr.frstart AND x.user.friends_count < fr.frend),
      timeRangeClients = (select value tr.trid from timeRangeDataset tr
          where x.created_at >= tr.trstart AND x.created_at < tr.trend),
      spaceRangeClients = (select value sp.spid from spaceRangeDataset sp
          where spatial_intersect(create_rectangle(sp.spstart, sp.spend), create_point(x.latitude, x.longitude)))
  select x.*, followersClients, statusesClients, friendsClients, timeRangeClients, spaceRangeClients
};